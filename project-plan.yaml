project:
  name: "Supabase Service Manager Library"
  description: "TypeScript library for user authentication, profile management, and basic CRUD operations using Supabase, designed for vanilla JavaScript consumption"
  version: "1.0.0"

overview:
  purpose: "Comprehensive service manager for Supabase operations across multiple projects"
  target_environment: "Browser (vanilla JS consumption)"
  distribution: "npm via automated GitHub Actions"

architecture:
  principles:
    - "Data Agnostic: No project-specific data handling"
    - "Configuration-Based: Projects provide Supabase config"
    - "Result-Based Error Handling: Simple Result pattern with basic errors"
    - "Basic CRUD: Essential operations only (create, read, update, delete, list)"
    - "Service Integration: Combines auth, user, and CRUD services"
    - "CI/CD Automated: GitHub Actions for publishing and documentation"

  structure:
    src:
      types:
        - "result.ts: Simple Result wrapper types"
        - "user.ts: User interfaces and profile types"
        - "auth.ts: Authentication and session types"
      services:
        - "auth.service.ts: Authentication operations"
        - "user.service.ts: User profile operations"
        - "crud.service.ts: Basic CRUD operations"
      core:
        - "service-manager.ts: Main library class"
      root:
        - "index.ts: Public API exports"
    github:
      workflows:
        - "publish.yml: Automated npm publishing on tag"
        - "docs.yml: Automated documentation deployment"
    docs:
      - "Generated TypeDoc API documentation"
    root:
      - "README.md: User-facing documentation and quick start"

api_design:
  configuration:
    SupabaseConfig:
      url: "string"
      anonKey: "string"
    ServiceManagerConfig:
      supabase: "SupabaseConfig"

  core_types:
    User:
      id: "string"
      email: "string"
      firstName: "string | optional"
      lastName: "string | optional"
      avatar: "string | optional"
      emailVerified: "boolean"
      createdAt: "string"
      updatedAt: "string"

    AuthSession:
      user: "User"
      accessToken: "string"
      refreshToken: "string"
      expiresAt: "number"

    Result:
      pattern: "Result<T, E = Error>"
      success_case:
        success: true
        data: "T"
      error_case:
        success: false
        error: "E"

  main_class:
    ServiceManager:
      constructor: "ServiceManagerConfig"
      methods:
        authentication:
          signUp:
            params: ["email: string", "password: string", "profile?: ProfileData"]
            returns: "Promise<Result<{user: User; needsVerification: boolean}>>"
          signIn:
            params: ["email: string", "password: string"]
            returns: "Promise<Result<{user: User; session: AuthSession}>>"
          signOut:
            params: []
            returns: "Promise<Result<void>>"
          resendVerificationEmail:
            params: []
            returns: "Promise<Result<void>>"
        profile_management:
          updateProfile:
            params: ["updates: Partial<Pick<User, 'firstName' | 'lastName' | 'avatar'>>"]
            returns: "Promise<Result<User>>"
          getCurrentUser:
            params: []
            returns: "Promise<Result<User | null>>"
          getCurrentSession:
            params: []
            returns: "Promise<Result<AuthSession | null>>"
        crud_operations:
          create:
            params: ["table: string", "data: Record<string, any>"]
            returns: "Promise<Result<any>>"
          read:
            params: ["table: string", "id: string"]
            returns: "Promise<Result<any | null>>"
          update:
            params: ["table: string", "id: string", "data: Record<string, any>"]
            returns: "Promise<Result<any>>"
          delete:
            params: ["table: string", "id: string"]
            returns: "Promise<Result<void>>"
          list:
            params: ["table: string", "filters?: Record<string, any>"]
            returns: "Promise<Result<any[]>>"

technical_decisions:
  dependencies:
    runtime:
      - "@supabase/supabase-js: Latest stable version (regular dependency)"
    development:
      - "typescript: Latest stable version"
      - "vite: Latest stable version"
      - "vite-plugin-dts: Latest stable version"
      - "typedoc: Latest stable version"

  build_outputs:
    - "ESM: Modern bundlers and browsers (dist/index.js)"
    - "CJS: Node.js compatibility (dist/index.cjs)"
    - "UMD: Direct browser usage (dist/index.umd.js)"
    - "TypeScript Declarations: Type support (dist/index.d.ts)"

  error_handling:
    strategy: "Simple Result pattern with basic Error objects"
    approach: "Wrap Supabase errors in Result pattern without complex mapping"
    example: |
      const result = await serviceManager.signUp(email, password);
      if (result.success) {
        console.log("User created:", result.data.user);
      } else {
        console.error("Sign up failed:", result.error.message);
      }

  session_management:
    - "Library handles session state internally"
    - "Projects access via getCurrentSession()"
    - "Automatic token refresh via Supabase client"

  ci_cd_strategy:
    publishing:
      - "GitHub Actions workflow triggered by version tags"
      - "Automated npm publishing with provenance"
      - "Automatic GitHub release creation"
    documentation:
      - "TypeDoc generation and GitHub Pages deployment"
      - "Automatic updates on main branch changes"

implementation_phases:
  phase_1:
    name: "Project Foundation"
    status: "completed"
    tasks:
      project_setup:
        description: "Initialize TypeScript project with Vite and tooling"
        status: "completed"
        deliverables:
          - "package.json configured for GitHub npm publishing"
          - "tsconfig.json for TypeScript compilation"
          - "vite.config.ts for library building with multiple formats"
          - "typedoc.json for API documentation generation"
          - "src/ directory structure creation"
          - "Install latest stable versions of all dependencies"
      repository_setup:
        description: "Configure repository metadata and placeholders"
        status: "completed"
        deliverables:
          - "Update package.json with correct repository URLs"
          - "Set author information"
          - "Configure npm registry settings"

  phase_2:
    name: "Type System Foundation"
    status: "completed"
    tasks:
      result_types:
        description: "Create simple Result pattern types"
        status: "completed"
        deliverables:
          - "src/types/result.ts with basic Result<T, E> pattern"
          - "Success and Failure interfaces"
          - "Helper functions: createSuccess, createFailure"
          - "Type guards: isSuccess, isFailure"
      user_types:
        description: "Create user-related type definitions"
        status: "completed"
        deliverables:
          - "src/types/user.ts with User interface"
          - "UserProfileUpdate type for profile modifications"
          - "UserSignUpData and UserSignInData interfaces"
      auth_types:
        description: "Create authentication and configuration types"
        status: "completed"
        deliverables:
          - "src/types/auth.ts with AuthSession interface"
          - "SupabaseConfig and ServiceManagerConfig interfaces"
          - "SignUpResult and SignInResult interfaces"

  phase_3:
    name: "Authentication Service"
    status: "completed"
    tasks:
      auth_service:
        description: "Implement authentication service with basic error handling"
        status: "completed"
        deliverables:
          - "src/services/auth.service.ts with AuthService class"
          - "Supabase client initialization and configuration"
          - "signUp method with email verification and profile support"
          - "signIn method with session management"
          - "signOut method with proper cleanup"
          - "getCurrentUser and getCurrentSession methods"
          - "resendVerificationEmail functionality"
          - "Basic error wrapping in Result pattern"
          - "User data mapping from Supabase format to User interface"

  phase_4:
    name: "Profile Management Service"
    status: "completed"
    tasks:
      user_service:
        description: "Implement user profile management service"
        status: "completed"
        deliverables:
          - "src/services/user.service.ts with UserService class"
          - "updateProfile method with metadata merging"
          - "getCurrentUser method with authentication checks"
          - "Basic error handling with Result pattern"

  phase_5:
    name: "Basic CRUD Service"
    status: "completed"
    tasks:
      crud_service:
        description: "Implement essential CRUD operations only"
        status: "completed"
        deliverables:
          - "src/services/crud.service.ts with CrudService class"
          - "Basic create, read, update, delete operations"
          - "Simple list method with optional basic filtering"
          - "Basic error handling with Result pattern"
          - "Simple database error wrapping"

  phase_6:
    name: "Main Library Integration"
    status: "completed"
    tasks:
      service_manager:
        description: "Create main ServiceManager class integrating all services"
        status: "completed"
        deliverables:
          - "src/core/service-manager.ts with ServiceManager class"
          - "Service integration and dependency injection"
          - "Public API methods matching specification exactly"
          - "Authentication methods: signUp, signIn, signOut, resendVerificationEmail"
          - "Profile methods: updateProfile, getCurrentUser, getCurrentSession"
          - "Basic CRUD methods: create, read, update, delete, list"
          - "TSDoc documentation with examples"
          - "Simple error handling delegation to services"

  phase_7:
    name: "Public API and Exports"
    status: "completed"
    tasks:
      api_exports:
        description: "Create clean public API with organized exports"
        status: "completed"
        deliverables:
          - "src/index.ts as main entry point"
          - "Export ServiceManager as primary class"
          - "Export all core types and interfaces"
          - "Export utility functions and type guards"
          - "Export service classes for advanced usage"
          - "Library metadata exports (version, name)"
          - "Default export for convenience"

  phase_8:
    name: "Documentation and User Guides"
    status: "completed"
    tasks:
      readme_creation:
        description: "Create comprehensive README for users"
        status: "completed"
        deliverables:
          - "README.md with project overview and features"
          - "Installation instructions"
          - "Quick start guide with working examples"
          - "Vanilla JavaScript usage examples"
          - "Simple Result pattern explanation"
          - "Configuration guide"
          - "Basic usage examples"
          - "Simple error handling patterns"
          - "TypeScript integration guide"
      typedoc_setup:
        description: "Configure TypeDoc documentation generation"
        status: "completed"
        deliverables:
          - "Verify typedoc.json configuration"
          - "Test documentation generation"
          - "Ensure TSDoc comments render properly"

  phase_9:
    name: "Build System and Quality Assurance"
    status: "completed"
    tasks:
      build_testing:
        description: "Test and validate build system"
        status: "completed"
        deliverables:
          - "Test build process with npm run build"
          - "Verify all output formats generate correctly (ESM, CJS, UMD)"
          - "Confirm TypeScript declarations are generated"
          - "Test package contents with npm pack --dry-run"
      quality_checks:
        description: "Implement quality assurance measures"
        status: "completed"
        deliverables:
          - "Type checking with npm run type-check"
          - "Verify no TypeScript errors"
          - "Confirm all imports resolve correctly"
          - "Validate package.json configuration"

  phase_10:
    name: "CI/CD and Publishing Workflows"
    status: "completed"
    tasks:
      github_workflows:
        description: "Create GitHub Actions workflows for automation"
        status: "completed"
        deliverables:
          - ".github/workflows/publish.yml for automated npm publishing"
          - "Trigger on version tag pushes (v*)"
          - "Quality checks: type-check, build, docs generation"
          - "Package verification with dry-run"
          - "Secure npm publishing with NPM_TOKEN secret"
          - "npm provenance for supply chain security"
          - "Automatic GitHub release creation"
          - ".github/workflows/docs.yml for documentation deployment"
          - "Automatic TypeDoc generation and GitHub Pages deployment"
      deployment_setup:
        description: "Configure deployment and publishing infrastructure"
        status: "completed"
        deliverables:
          - "GitHub repository secrets configuration guide"
          - "NPM_TOKEN setup instructions"
          - "GitHub Pages configuration guide"
          - "Version tagging and release process documentation"

validation_criteria:
  functional:
    - "All authentication flows work correctly"
    - "Profile updates persist to Supabase"
    - "Error handling returns proper Result objects"
    - "Email verification flow works"
    - "Basic CRUD operations work with any table structure"
  technical:
    - "Library builds successfully for all target formats"
    - "TypeScript types are properly exported"
    - "Can be consumed by vanilla JavaScript projects"
    - "Works with separate Supabase project configurations"
    - "GitHub Actions workflows execute successfully"
    - "Documentation deploys automatically to GitHub Pages"
  quality:
    - "No runtime errors in target environments"
    - "Proper tree-shaking support"
    - "Clean API surface with comprehensive documentation"
    - "Automated publishing works reliably"
    - "Bundle sizes are reasonable and optimized"

usage_example: |
  import {ServiceManager} from "supabase-service-manager";

  const serviceManager = new ServiceManager({
    supabase: {
      url: "your-supabase-url",
      anonKey: "your-anon-key",
    },
  });

  // Sign up
  const signUpResult = await serviceManager.signUp("user@example.com", "password123");
  if (signUpResult.success) {
    if (signUpResult.data.needsVerification) {
      console.log("Please check your email for verification");
    }
  }

  // Sign in
  const signInResult = await serviceManager.signIn("user@example.com", "password123");
  if (signInResult.success) {
    console.log("Signed in:", signInResult.data.user);
  }

  // Update profile
  const updateResult = await serviceManager.updateProfile({
    firstName: "John",
    lastName: "Doe",
    avatar: "https://example.com/avatar.jpg",
  });

  // Basic CRUD operations
  const createResult = await serviceManager.create("social_links", {
    user_id: signInResult.data.user.id,
    platform: "twitter",
    url: "https://twitter.com/username",
  });

progress_tracking:
  current_phase: "phase_9"
  current_task: "build_testing"
  completed_steps:
    - "package.json configured for GitHub npm publishing"
    - "tsconfig.json for TypeScript compilation"
    - "vite.config.ts for library building with multiple formats"
    - "typedoc.json for API documentation generation"
    - "src/ directory structure creation"
    - "Placeholder index.ts created to resolve TypeScript configuration"
    - "src/types/result.ts with basic Result pattern and helper functions"
    - "src/types/user.ts with User interface and profile types"
    - "src/types/auth.ts with authentication and configuration types"
    - "Updated index.ts to export all type definitions"
    - "src/services/auth.service.ts with complete authentication functionality"
    - "src/services/user.service.ts with profile management operations"
    - "src/services/crud.service.ts with basic CRUD operations"
    - "src/core/service-manager.ts with complete ServiceManager class integration"
    - "Updated src/index.ts with all public API exports"
    - "Renamed UserManager to ServiceManager throughout codebase"
    - "Updated package.json with broader scope and new name"
    - "Updated all configuration files to reflect ServiceManager"
    - "Created comprehensive README.md with examples and usage guide"
    - "Tested TypeDoc documentation generation successfully"
  next_steps:
    - "Test build system with npm run build"
    - "Validate all output formats and TypeScript declarations"
    - "Test package contents with npm pack --dry-run"
    - "Verify no TypeScript errors with type checking"

  notes:
    - "Simplified project plan based on user feedback"
    - "Removed complex CRUD operations (pagination, advanced filtering, etc.)"
    - "Using latest stable versions as regular dependencies instead of peer deps"
    - "Implementing simple error handling with basic Result pattern"
    - "Focus on essential functionality only"
    - "Package name: supabase-service-manager (updated from supabase-user-manager)"
    - "Author: @alsandre"
    - "Repository: tsu-front-end/supa-lib"
    - "Phase 1 project setup completed - all configuration files created"
    - "Directory structure established with placeholder files"
    - "Phase 2 type system completed - all core types defined with TSDoc"
    - "Phase 3-5 services completed - auth, user, and CRUD services implemented"
    - "Phase 6-7 main library completed - ServiceManager class with full public API"
    - "Renamed from UserManager to ServiceManager to reflect broader scope"
    - "Core implementation complete - ready for documentation and build testing"
    - "Phase 8 documentation completed - comprehensive README and TypeDoc generation tested"

documentation_structure:
  readme:
    purpose: "User-facing quick start and overview documentation"
    sections:
      - "Project overview and features"
      - "Installation instructions"
      - "Quick start with working examples"
      - "Vanilla JavaScript usage"
      - "Result pattern explanation"
      - "Configuration guide"
      - "Core concepts overview"
      - "Real-world examples"
      - "Error handling patterns"
      - "TypeScript integration"
      - "Development setup"

  typedoc:
    purpose: "Complete API reference documentation"
    generation: "Automated from TSDoc comments"
    deployment: "GitHub Pages via GitHub Actions"
    sections:
      - "ServiceManager class overview"
      - "Authentication methods"
      - "Profile management methods"
      - "CRUD operations"
      - "Configuration interfaces"
      - "Result types and error handling"
      - "Service classes for advanced usage"

  code_examples:
    format: "Runnable TypeScript examples"
    coverage:
      - "All public methods with parameters and return types"
      - "Common use cases and patterns"
      - "Error scenarios and handling"
      - "Integration patterns for different project types"

ci_cd_strategy:
  publishing_workflow:
    trigger: "Version tag push (v*)"
    steps:
      - "Checkout code"
      - "Setup Node.js with npm cache"
      - "Install dependencies with npm ci"
      - "Run type checking"
      - "Build library for all formats"
      - "Generate documentation"
      - "Verify package contents"
      - "Publish to npm with provenance"
      - "Create GitHub release with changelog"

  documentation_workflow:
    trigger: "Push to main branch or manual dispatch"
    steps:
      - "Checkout code"
      - "Setup Node.js with npm cache"
      - "Install dependencies"
      - "Generate TypeDoc documentation"
      - "Deploy to GitHub Pages"

  security:
    - "NPM_TOKEN stored in GitHub secrets"
    - "npm provenance for supply chain security"
    - "Automated dependency updates"
    - "No manual publishing steps required"

ai_management:
  update_frequency: "After each atomic step completion"
  tracking_fields:
    - "progress_tracking.completed_steps"
    - "implementation_phases.*.tasks.*.status"
    - "progress_tracking.current_phase"
    - "progress_tracking.current_task"
    - "progress_tracking.notes"

  maintenance_rules:
    - "Update task status when deliverables are completed"
    - "Add completion timestamps for completed tasks"
    - "Track any deviations from original plan"
    - "Note any architectural decisions or changes"
    - "Maintain validation criteria checklist"
    - "Document lessons learned for future implementations"

final_deliverables:
  code:
    - "Complete TypeScript library with full type safety"
    - "Multiple build formats (ESM, CJS, UMD)"
    - "Comprehensive error handling with Result pattern"
    - "Data-agnostic CRUD operations"
    - "Authentication and profile management"

  documentation:
    - "User-friendly README with examples"
    - "Complete API documentation via TypeDoc"
    - "Automated documentation deployment"

  automation:
    - "GitHub Actions for automated publishing"
    - "GitHub Actions for documentation deployment"
    - "Version-based release management"

  distribution:
    - "npm package ready for installation"
    - "GitHub repository with complete source"
    - "Public API documentation website"
