{"version":3,"file":"index.js","sources":["../src/types/result.ts","../src/services/auth.service.ts","../src/services/user.service.ts","../src/services/crud.service.ts","../src/core/service-manager.ts","../src/index.ts"],"sourcesContent":["/**\n * @fileoverview Result pattern types for error handling without exceptions\n * @category Types\n */\n\n/**\n * Success result containing data\n */\nexport interface Success<T> {\n  success: true;\n  data: T;\n}\n\n/**\n * Failure result containing error\n */\nexport interface Failure<E = Error> {\n  success: false;\n  error: E;\n}\n\n/**\n * Result type that can be either success or failure\n * @template T - Type of success data\n * @template E - Type of error (defaults to Error)\n */\nexport type Result<T, E = Error> = Success<T> | Failure<E>;\n\n/**\n * Creates a success result\n * @param data - The success data\n * @returns Success result\n */\nexport function createSuccess<T>(data: T): Success<T> {\n  return {\n    success: true,\n    data,\n  };\n}\n\n/**\n * Creates a failure result\n * @param error - The error\n * @returns Failure result\n */\nexport function createFailure<E = Error>(error: E): Failure<E> {\n  return {\n    success: false,\n    error,\n  };\n}\n\n/**\n * Type guard to check if result is successful\n * @param result - Result to check\n * @returns True if result is successful\n */\nexport function isSuccess<T, E>(result: Result<T, E>): result is Success<T> {\n  return result.success === true;\n}\n\n/**\n * Type guard to check if result is a failure\n * @param result - Result to check\n * @returns True if result is a failure\n */\nexport function isFailure<T, E>(result: Result<T, E>): result is Failure<E> {\n  return result.success === false;\n}\n","/**\n * @fileoverview Authentication service for user authentication operations\n * @category Authentication\n */\n\nimport {createClient, type SupabaseClient} from \"@supabase/supabase-js\";\nimport type {SupabaseConfig, AuthSession, SignUpResult, SignInResult} from \"../types/auth\";\nimport type {User, UserProfileUpdate} from \"../types/user\";\nimport type {Result} from \"../types/result\";\nimport {createSuccess, createFailure} from \"../types/result\";\n\n/**\n * Authentication service handling user authentication operations\n */\nexport class AuthService {\n  private supabase: SupabaseClient;\n\n  /**\n   * Initialize the authentication service\n   * @param config - Supabase configuration\n   */\n  constructor(config: SupabaseConfig) {\n    this.supabase = createClient(config.url, config.anonKey);\n  }\n\n  /**\n   * Sign up a new user with email and password\n   * @param email - User's email address\n   * @param password - User's password\n   * @param profile - Optional profile data to set during signup\n   * @returns Promise resolving to Result with user and verification status\n   */\n  async signUp(email: string, password: string, profile?: UserProfileUpdate): Promise<Result<SignUpResult>> {\n    try {\n      const {data, error} = await this.supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          data: profile || {},\n        },\n      });\n\n      if (error) {\n        return createFailure(new Error(error.message));\n      }\n\n      if (!data.user) {\n        return createFailure(new Error(\"User creation failed\"));\n      }\n\n      const user = this.mapSupabaseUserToUser(data.user);\n      const needsVerification = !data.user.email_confirmed_at;\n\n      return createSuccess({\n        user,\n        needsVerification,\n      });\n    } catch (error) {\n      return createFailure(error instanceof Error ? error : new Error(\"Sign up failed\"));\n    }\n  }\n\n  /**\n   * Sign in an existing user with email and password\n   * @param email - User's email address\n   * @param password - User's password\n   * @returns Promise resolving to Result with user and session\n   */\n  async signIn(email: string, password: string): Promise<Result<SignInResult>> {\n    try {\n      const {data, error} = await this.supabase.auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      if (error) {\n        return createFailure(new Error(error.message));\n      }\n\n      if (!data.user || !data.session) {\n        return createFailure(new Error(\"Sign in failed\"));\n      }\n\n      const user = this.mapSupabaseUserToUser(data.user);\n      const session = this.mapSupabaseSessionToAuthSession(data.session, user);\n\n      return createSuccess({\n        user,\n        session,\n      });\n    } catch (error) {\n      return createFailure(error instanceof Error ? error : new Error(\"Sign in failed\"));\n    }\n  }\n\n  /**\n   * Sign out the current user\n   * @returns Promise resolving to Result indicating success or failure\n   */\n  async signOut(): Promise<Result<void>> {\n    try {\n      const {error} = await this.supabase.auth.signOut();\n\n      if (error) {\n        return createFailure(new Error(error.message));\n      }\n\n      return createSuccess(undefined);\n    } catch (error) {\n      return createFailure(error instanceof Error ? error : new Error(\"Sign out failed\"));\n    }\n  }\n\n  /**\n   * Get the current authenticated user\n   * @returns Promise resolving to Result with current user or null\n   */\n  async getCurrentUser(): Promise<Result<User | null>> {\n    try {\n      const {\n        data: {user},\n        error,\n      } = await this.supabase.auth.getUser();\n\n      if (error) {\n        return createFailure(new Error(error.message));\n      }\n\n      if (!user) {\n        return createSuccess(null);\n      }\n\n      const mappedUser = this.mapSupabaseUserToUser(user);\n      return createSuccess(mappedUser);\n    } catch (error) {\n      return createFailure(error instanceof Error ? error : new Error(\"Failed to get current user\"));\n    }\n  }\n\n  /**\n   * Get the current authentication session\n   * @returns Promise resolving to Result with current session or null\n   */\n  async getCurrentSession(): Promise<Result<AuthSession | null>> {\n    try {\n      const {\n        data: {session},\n        error,\n      } = await this.supabase.auth.getSession();\n\n      if (error) {\n        return createFailure(new Error(error.message));\n      }\n\n      if (!session) {\n        return createSuccess(null);\n      }\n\n      const user = this.mapSupabaseUserToUser(session.user);\n      const authSession = this.mapSupabaseSessionToAuthSession(session, user);\n\n      return createSuccess(authSession);\n    } catch (error) {\n      return createFailure(error instanceof Error ? error : new Error(\"Failed to get current session\"));\n    }\n  }\n\n  /**\n   * Resend email verification for the current user\n   * @returns Promise resolving to Result indicating success or failure\n   */\n  async resendVerificationEmail(): Promise<Result<void>> {\n    try {\n      const {\n        data: {user},\n      } = await this.supabase.auth.getUser();\n\n      if (!user) {\n        return createFailure(new Error(\"No authenticated user found\"));\n      }\n\n      const {error} = await this.supabase.auth.resend({\n        type: \"signup\",\n        email: user.email!,\n      });\n\n      if (error) {\n        return createFailure(new Error(error.message));\n      }\n\n      return createSuccess(undefined);\n    } catch (error) {\n      return createFailure(error instanceof Error ? error : new Error(\"Failed to resend verification email\"));\n    }\n  }\n\n  // TODO: extract as utility function\n  /**\n   * Map Supabase user object to our User interface\n   * @param supabaseUser - Supabase user object\n   * @returns Mapped User object\n   */\n  private mapSupabaseUserToUser(supabaseUser: any): User {\n    return {\n      id: supabaseUser.id,\n      email: supabaseUser.email,\n      firstName: supabaseUser.user_metadata?.firstName || supabaseUser.user_metadata?.first_name,\n      lastName: supabaseUser.user_metadata?.lastName || supabaseUser.user_metadata?.last_name,\n      avatar: supabaseUser.user_metadata?.avatar || supabaseUser.user_metadata?.avatar_url,\n      emailVerified: !!supabaseUser.email_confirmed_at,\n      createdAt: supabaseUser.created_at,\n      updatedAt: supabaseUser.updated_at,\n    };\n  }\n\n  /**\n   * Map Supabase session to our AuthSession interface\n   * @param supabaseSession - Supabase session object\n   * @param user - Mapped user object\n   * @returns Mapped AuthSession object\n   */\n  private mapSupabaseSessionToAuthSession(supabaseSession: any, user: User): AuthSession {\n    return {\n      user,\n      accessToken: supabaseSession.access_token,\n      refreshToken: supabaseSession.refresh_token,\n      expiresAt: supabaseSession.expires_at,\n    };\n  }\n}\n","/**\n * @fileoverview User profile management service\n * @category Profile Management\n */\n\nimport type {SupabaseClient} from \"@supabase/supabase-js\";\nimport type {User, UserProfileUpdate} from \"../types/user\";\nimport type {Result} from \"../types/result\";\nimport {createSuccess, createFailure} from \"../types/result\";\n\n/**\n * User service handling profile management operations\n */\nexport class UserService {\n  private supabase: SupabaseClient;\n\n  /**\n   * Initialize the user service\n   * @param supabaseClient - Configured Supabase client\n   */\n  constructor(supabaseClient: SupabaseClient) {\n    this.supabase = supabaseClient;\n  }\n\n  /**\n   * Update the current user's profile information\n   * @param updates - Profile fields to update\n   * @returns Promise resolving to Result with updated user\n   */\n  async updateProfile(updates: UserProfileUpdate): Promise<Result<User>> {\n    try {\n      // Get current user first\n      const {\n        data: {user},\n        error: getUserError,\n      } = await this.supabase.auth.getUser();\n\n      if (getUserError) {\n        return createFailure(new Error(getUserError.message));\n      }\n\n      if (!user) {\n        return createFailure(new Error(\"No authenticated user found\"));\n      }\n\n      // Update user metadata\n      const {data, error} = await this.supabase.auth.updateUser({\n        data: {\n          ...user.user_metadata,\n          ...updates,\n        },\n      });\n\n      if (error) {\n        return createFailure(new Error(error.message));\n      }\n\n      if (!data.user) {\n        return createFailure(new Error(\"Profile update failed\"));\n      }\n\n      const updatedUser = this.mapSupabaseUserToUser(data.user);\n      return createSuccess(updatedUser);\n    } catch (error) {\n      return createFailure(error instanceof Error ? error : new Error(\"Profile update failed\"));\n    }\n  }\n\n  /**\n   * Get the current authenticated user with fresh data\n   * @returns Promise resolving to Result with current user or null\n   */\n  async getCurrentUser(): Promise<Result<User | null>> {\n    try {\n      const {\n        data: {user},\n        error,\n      } = await this.supabase.auth.getUser();\n\n      if (error) {\n        return createFailure(new Error(error.message));\n      }\n\n      if (!user) {\n        return createSuccess(null);\n      }\n\n      const mappedUser = this.mapSupabaseUserToUser(user);\n      return createSuccess(mappedUser);\n    } catch (error) {\n      return createFailure(error instanceof Error ? error : new Error(\"Failed to get current user\"));\n    }\n  }\n\n  // TODO: extract as utility function\n  /**\n   * Map Supabase user object to our User interface\n   * @param supabaseUser - Supabase user object\n   * @returns Mapped User object\n   */\n  private mapSupabaseUserToUser(supabaseUser: any): User {\n    return {\n      id: supabaseUser.id,\n      email: supabaseUser.email,\n      firstName: supabaseUser.user_metadata?.firstName || supabaseUser.user_metadata?.first_name,\n      lastName: supabaseUser.user_metadata?.lastName || supabaseUser.user_metadata?.last_name,\n      avatar: supabaseUser.user_metadata?.avatar || supabaseUser.user_metadata?.avatar_url,\n      emailVerified: !!supabaseUser.email_confirmed_at,\n      createdAt: supabaseUser.created_at,\n      updatedAt: supabaseUser.updated_at,\n    };\n  }\n}\n","/**\n * @fileoverview Basic CRUD operations service\n * @category CRUD Operations\n */\n\nimport {SupabaseClient} from \"@supabase/supabase-js\";\nimport type {Result} from \"../types/result\";\nimport {createSuccess, createFailure} from \"../types/result\";\n\n/**\n * CRUD service handling basic database operations\n */\nexport class CrudService {\n  private supabase: SupabaseClient;\n\n  /**\n   * Initialize the CRUD service\n   * @param supabaseClient - Configured Supabase client\n   */\n  constructor(supabaseClient: SupabaseClient) {\n    this.supabase = supabaseClient;\n  }\n\n  /**\n   * Create a new record in the specified table\n   * @param table - Table name\n   * @param data - Data to insert\n   * @returns Promise resolving to Result with created record\n   */\n  async create(table: string, data: Record<string, any>): Promise<Result<any>> {\n    try {\n      const {data: result, error} = await this.supabase.from(table).insert(data).select().single();\n\n      if (error) {\n        return createFailure(new Error(error.message));\n      }\n\n      return createSuccess(result);\n    } catch (error) {\n      return createFailure(error instanceof Error ? error : new Error(\"Create operation failed\"));\n    }\n  }\n\n  /**\n   * Read a record by ID from the specified table\n   * @param table - Table name\n   * @param id - Record ID\n   * @returns Promise resolving to Result with record or null\n   */\n  async read(table: string, id: string): Promise<Result<any | null>> {\n    try {\n      const {data, error} = await this.supabase.from(table).select(\"*\").eq(\"id\", id).single();\n\n      if (error) {\n        // Handle \"not found\" as success with null\n        if (error.code === \"PGRST116\") {\n          return createSuccess(null);\n        }\n        return createFailure(new Error(error.message));\n      }\n\n      return createSuccess(data);\n    } catch (error) {\n      return createFailure(error instanceof Error ? error : new Error(\"Read operation failed\"));\n    }\n  }\n\n  /**\n   * Update a record by ID in the specified table\n   * @param table - Table name\n   * @param id - Record ID\n   * @param data - Data to update\n   * @returns Promise resolving to Result with updated record\n   */\n  async update(table: string, id: string, data: Record<string, any>): Promise<Result<any>> {\n    try {\n      const {data: result, error} = await this.supabase.from(table).update(data).eq(\"id\", id).select().single();\n\n      if (error) {\n        return createFailure(new Error(error.message));\n      }\n\n      return createSuccess(result);\n    } catch (error) {\n      return createFailure(error instanceof Error ? error : new Error(\"Update operation failed\"));\n    }\n  }\n\n  /**\n   * Delete a record by ID from the specified table\n   * @param table - Table name\n   * @param id - Record ID\n   * @returns Promise resolving to Result indicating success or failure\n   */\n  async delete(table: string, id: string): Promise<Result<void>> {\n    try {\n      const {error} = await this.supabase.from(table).delete().eq(\"id\", id);\n\n      if (error) {\n        return createFailure(new Error(error.message));\n      }\n\n      return createSuccess(undefined);\n    } catch (error) {\n      return createFailure(error instanceof Error ? error : new Error(\"Delete operation failed\"));\n    }\n  }\n\n  /**\n   * List records from the specified table with optional basic filtering\n   * @param table - Table name\n   * @param filters - Optional filters to apply\n   * @returns Promise resolving to Result with array of records\n   */\n  async list(table: string, filters?: Record<string, any>): Promise<Result<any[]>> {\n    try {\n      let query = this.supabase.from(table).select(\"*\");\n\n      // Apply basic filters if provided\n      if (filters) {\n        Object.entries(filters).forEach(([key, value]) => {\n          query = query.eq(key, value);\n        });\n      }\n\n      const {data, error} = await query;\n\n      if (error) {\n        return createFailure(new Error(error.message));\n      }\n\n      return createSuccess(data || []);\n    } catch (error) {\n      return createFailure(error instanceof Error ? error : new Error(\"List operation failed\"));\n    }\n  }\n}\n","/**\n * @fileoverview Main ServiceManager class integrating all services\n * @category Main\n */\n\nimport {createClient, type SupabaseClient} from \"@supabase/supabase-js\";\nimport {AuthService} from \"../services/auth.service\";\nimport {UserService} from \"../services/user.service\";\nimport {CrudService} from \"../services/crud.service\";\nimport type {ServiceManagerConfig, AuthSession, SignUpResult, SignInResult} from \"../types/auth\";\nimport type {User, UserProfileUpdate} from \"../types/user\";\nimport type {Result} from \"../types/result\";\n\n/**\n * Main ServiceManager class providing user authentication, profile management, and basic CRUD operations\n *\n * @example\n * ```typescript\n * const serviceManager = new ServiceManager({\n *   supabase: {\n *     url: \"your-supabase-url\",\n *     anonKey: \"your-anon-key\",\n *   },\n * });\n *\n * // Sign up a new user\n * const signUpResult = await serviceManager.signUp(\"user@example.com\", \"password123\");\n * if (signUpResult.success) {\n *   console.log(\"User created:\", signUpResult.data.user);\n * }\n *\n * // Create a database record\n * const createResult = await serviceManager.create(\"social_links\", {\n *   user_id: signUpResult.data.user.id,\n *   platform: \"twitter\",\n *   url: \"https://twitter.com/username\"\n * });\n * ```\n */\nexport class ServiceManager {\n  private supabase: SupabaseClient;\n  private authService: AuthService;\n  private userService: UserService;\n  private crudService: CrudService;\n\n  /**\n   * Initialize the ServiceManager with Supabase configuration\n   * @param config - ServiceManager configuration containing Supabase settings\n   */\n  constructor(config: ServiceManagerConfig) {\n    this.supabase = createClient(config.supabase.url, config.supabase.anonKey);\n    this.authService = new AuthService(config.supabase);\n    this.userService = new UserService(this.supabase);\n    this.crudService = new CrudService(this.supabase);\n  }\n\n  // Authentication Methods\n\n  /**\n   * Sign up a new user with email and password\n   * @param email - User's email address\n   * @param password - User's password\n   * @param profile - Optional profile data to set during signup\n   * @returns Promise resolving to Result with user and verification status\n   *\n   * @example\n   * ```typescript\n   * const result = await serviceManager.signUp(\"user@example.com\", \"password123\", {\n   *   firstName: \"John\",\n   *   lastName: \"Doe\"\n   * });\n   *\n   * if (result.success) {\n   *   if (result.data.needsVerification) {\n   *     console.log(\"Please check your email for verification\");\n   *   }\n   *   console.log(\"User created:\", result.data.user);\n   * } else {\n   *   console.error(\"Sign up failed:\", result.error.message);\n   * }\n   * ```\n   */\n  async signUp(email: string, password: string, profile?: UserProfileUpdate): Promise<Result<SignUpResult>> {\n    return this.authService.signUp(email, password, profile);\n  }\n\n  /**\n   * Sign in an existing user with email and password\n   * @param email - User's email address\n   * @param password - User's password\n   * @returns Promise resolving to Result with user and session\n   *\n   * @example\n   * ```typescript\n   * const result = await serviceManager.signIn(\"user@example.com\", \"password123\");\n   *\n   * if (result.success) {\n   *   console.log(\"Signed in:\", result.data.user);\n   *   console.log(\"Session expires at:\", new Date(result.data.session.expiresAt));\n   * } else {\n   *   console.error(\"Sign in failed:\", result.error.message);\n   * }\n   * ```\n   */\n  async signIn(email: string, password: string): Promise<Result<SignInResult>> {\n    return this.authService.signIn(email, password);\n  }\n\n  /**\n   * Sign out the current user\n   * @returns Promise resolving to Result indicating success or failure\n   *\n   * @example\n   * ```typescript\n   * const result = await serviceManager.signOut();\n   *\n   * if (result.success) {\n   *   console.log(\"Successfully signed out\");\n   * } else {\n   *   console.error(\"Sign out failed:\", result.error.message);\n   * }\n   * ```\n   */\n  async signOut(): Promise<Result<void>> {\n    return this.authService.signOut();\n  }\n\n  /**\n   * Resend email verification for the current user\n   * @returns Promise resolving to Result indicating success or failure\n   *\n   * @example\n   * ```typescript\n   * const result = await serviceManager.resendVerificationEmail();\n   *\n   * if (result.success) {\n   *   console.log(\"Verification email sent\");\n   * } else {\n   *   console.error(\"Failed to send verification email:\", result.error.message);\n   * }\n   * ```\n   */\n  async resendVerificationEmail(): Promise<Result<void>> {\n    return this.authService.resendVerificationEmail();\n  }\n\n  // Profile Management Methods\n\n  /**\n   * Update the current user's profile information\n   * @param updates - Profile fields to update (firstName, lastName, avatar)\n   * @returns Promise resolving to Result with updated user\n   *\n   * @example\n   * ```typescript\n   * const result = await serviceManager.updateProfile({\n   *   firstName: \"John\",\n   *   lastName: \"Doe\",\n   *   avatar: \"https://example.com/avatar.jpg\"\n   * });\n   *\n   * if (result.success) {\n   *   console.log(\"Profile updated:\", result.data);\n   * } else {\n   *   console.error(\"Profile update failed:\", result.error.message);\n   * }\n   * ```\n   */\n  async updateProfile(updates: UserProfileUpdate): Promise<Result<User>> {\n    return this.userService.updateProfile(updates);\n  }\n\n  /**\n   * Get the current authenticated user\n   * @returns Promise resolving to Result with current user or null\n   *\n   * @example\n   * ```typescript\n   * const result = await serviceManager.getCurrentUser();\n   *\n   * if (result.success) {\n   *   if (result.data) {\n   *     console.log(\"Current user:\", result.data);\n   *   } else {\n   *     console.log(\"No user is currently signed in\");\n   *   }\n   * } else {\n   *   console.error(\"Failed to get current user:\", result.error.message);\n   * }\n   * ```\n   */\n  async getCurrentUser(): Promise<Result<User | null>> {\n    return this.userService.getCurrentUser();\n  }\n\n  /**\n   * Get the current authentication session\n   * @returns Promise resolving to Result with current session or null\n   *\n   * @example\n   * ```typescript\n   * const result = await serviceManager.getCurrentSession();\n   *\n   * if (result.success) {\n   *   if (result.data) {\n   *     console.log(\"Current session:\", result.data);\n   *     console.log(\"Expires at:\", new Date(result.data.expiresAt));\n   *   } else {\n   *     console.log(\"No active session\");\n   *   }\n   * } else {\n   *   console.error(\"Failed to get current session:\", result.error.message);\n   * }\n   * ```\n   */\n  async getCurrentSession(): Promise<Result<AuthSession | null>> {\n    return this.authService.getCurrentSession();\n  }\n\n  // Basic CRUD Operations\n\n  /**\n   * Create a new record in the specified table\n   * @param table - Table name\n   * @param data - Data to insert\n   * @returns Promise resolving to Result with created record\n   *\n   * @example\n   * ```typescript\n   * const result = await serviceManager.create(\"social_links\", {\n   *   user_id: \"user-id\",\n   *   platform: \"twitter\",\n   *   url: \"https://twitter.com/username\"\n   * });\n   *\n   * if (result.success) {\n   *   console.log(\"Record created:\", result.data);\n   * } else {\n   *   console.error(\"Create failed:\", result.error.message);\n   * }\n   * ```\n   */\n  async create(table: string, data: Record<string, any>): Promise<Result<any>> {\n    return this.crudService.create(table, data);\n  }\n\n  /**\n   * Read a record by ID from the specified table\n   * @param table - Table name\n   * @param id - Record ID\n   * @returns Promise resolving to Result with record or null\n   *\n   * @example\n   * ```typescript\n   * const result = await serviceManager.read(\"social_links\", \"link-id\");\n   *\n   * if (result.success) {\n   *   if (result.data) {\n   *     console.log(\"Record found:\", result.data);\n   *   } else {\n   *     console.log(\"Record not found\");\n   *   }\n   * } else {\n   *   console.error(\"Read failed:\", result.error.message);\n   * }\n   * ```\n   */\n  async read(table: string, id: string): Promise<Result<any | null>> {\n    return this.crudService.read(table, id);\n  }\n\n  /**\n   * Update a record by ID in the specified table\n   * @param table - Table name\n   * @param id - Record ID\n   * @param data - Data to update\n   * @returns Promise resolving to Result with updated record\n   *\n   * @example\n   * ```typescript\n   * const result = await serviceManager.update(\"social_links\", \"link-id\", {\n   *   url: \"https://twitter.com/newusername\"\n   * });\n   *\n   * if (result.success) {\n   *   console.log(\"Record updated:\", result.data);\n   * } else {\n   *   console.error(\"Update failed:\", result.error.message);\n   * }\n   * ```\n   */\n  async update(table: string, id: string, data: Record<string, any>): Promise<Result<any>> {\n    return this.crudService.update(table, id, data);\n  }\n\n  /**\n   * Delete a record by ID from the specified table\n   * @param table - Table name\n   * @param id - Record ID\n   * @returns Promise resolving to Result indicating success or failure\n   *\n   * @example\n   * ```typescript\n   * const result = await serviceManager.delete(\"social_links\", \"link-id\");\n   *\n   * if (result.success) {\n   *   console.log(\"Record deleted successfully\");\n   * } else {\n   *   console.error(\"Delete failed:\", result.error.message);\n   * }\n   * ```\n   */\n  async delete(table: string, id: string): Promise<Result<void>> {\n    return this.crudService.delete(table, id);\n  }\n\n  /**\n   * List records from the specified table with optional basic filtering\n   * @param table - Table name\n   * @param filters - Optional filters to apply (key-value pairs for exact matches)\n   * @returns Promise resolving to Result with array of records\n   *\n   * @example\n   * ```typescript\n   * // List all records\n   * const allResult = await serviceManager.list(\"social_links\");\n   *\n   * // List with filters\n   * const filteredResult = await serviceManager.list(\"social_links\", {\n   *   user_id: \"user-id\",\n   *   platform: \"twitter\"\n   * });\n   *\n   * if (filteredResult.success) {\n   *   console.log(\"Records found:\", filteredResult.data);\n   * } else {\n   *   console.error(\"List failed:\", filteredResult.error.message);\n   * }\n   * ```\n   */\n  async list(table: string, filters?: Record<string, any>): Promise<Result<any[]>> {\n    return this.crudService.list(table, filters);\n  }\n}\n","// Supabase Service Manager Library\n// Main entry point\n\n// Main class export\nexport {ServiceManager} from \"./core/service-manager\";\n\n// Type exports\nexport * from \"./types/result\";\nexport * from \"./types/user\";\nexport * from \"./types/auth\";\n\n// TODO: Uncomment these exports as modules are implemented\n// export * from './core/user-manager';\n\n// Service exports for advanced usage\nexport {AuthService} from \"./services/auth.service\";\nexport {UserService} from \"./services/user.service\";\nexport {CrudService} from \"./services/crud.service\";\n\n// Library metadata\nexport const version = \"1.0.0\";\n"],"names":[],"mappings":"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"}